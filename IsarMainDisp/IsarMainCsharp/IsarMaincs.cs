//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IsarMaincs {
  public static void IsarMain(emxArray_real_T rkafile, emxArray_real_T XX, emxArray_real_T YY, SWIGTYPE_p_real_T Th1, SWIGTYPE_p_real_T Ph1, emxArray_real_T ISAR_VVdB, emxArray_real_T ISAR_VHdB, emxArray_real_T ISAR_HVdB, emxArray_real_T ISAR_HHdB) {
    IsarMaincsPINVOKE.IsarMain(emxArray_real_T.getCPtr(rkafile), emxArray_real_T.getCPtr(XX), emxArray_real_T.getCPtr(YY), SWIGTYPE_p_real_T.getCPtr(Th1), SWIGTYPE_p_real_T.getCPtr(Ph1), emxArray_real_T.getCPtr(ISAR_VVdB), emxArray_real_T.getCPtr(ISAR_VHdB), emxArray_real_T.getCPtr(ISAR_HVdB), emxArray_real_T.getCPtr(ISAR_HHdB));
  }

  public static emxArray_real_T emxCreateND_real_T(SWIGTYPE_p_int32_T numDimensions, SWIGTYPE_p_int32_T size) {
    global::System.IntPtr cPtr = IsarMaincsPINVOKE.emxCreateND_real_T(SWIGTYPE_p_int32_T.getCPtr(numDimensions), SWIGTYPE_p_int32_T.getCPtr(size));
    emxArray_real_T ret = (cPtr == global::System.IntPtr.Zero) ? null : new emxArray_real_T(cPtr, true);
    if (IsarMaincsPINVOKE.SWIGPendingException.Pending) throw IsarMaincsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static emxArray_real_T emxCreateWrapperND_real_T(SWIGTYPE_p_real_T data, SWIGTYPE_p_int32_T numDimensions, SWIGTYPE_p_int32_T size) {
    global::System.IntPtr cPtr = IsarMaincsPINVOKE.emxCreateWrapperND_real_T(SWIGTYPE_p_real_T.getCPtr(data), SWIGTYPE_p_int32_T.getCPtr(numDimensions), SWIGTYPE_p_int32_T.getCPtr(size));
    emxArray_real_T ret = (cPtr == global::System.IntPtr.Zero) ? null : new emxArray_real_T(cPtr, true);
    if (IsarMaincsPINVOKE.SWIGPendingException.Pending) throw IsarMaincsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static emxArray_real_T emxCreateWrapper_real_T(SWIGTYPE_p_real_T data, SWIGTYPE_p_int32_T rows, SWIGTYPE_p_int32_T cols) {
    global::System.IntPtr cPtr = IsarMaincsPINVOKE.emxCreateWrapper_real_T(SWIGTYPE_p_real_T.getCPtr(data), SWIGTYPE_p_int32_T.getCPtr(rows), SWIGTYPE_p_int32_T.getCPtr(cols));
    emxArray_real_T ret = (cPtr == global::System.IntPtr.Zero) ? null : new emxArray_real_T(cPtr, true);
    if (IsarMaincsPINVOKE.SWIGPendingException.Pending) throw IsarMaincsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static emxArray_real_T emxCreate_real_T(SWIGTYPE_p_int32_T rows, SWIGTYPE_p_int32_T cols) {
    global::System.IntPtr cPtr = IsarMaincsPINVOKE.emxCreate_real_T(SWIGTYPE_p_int32_T.getCPtr(rows), SWIGTYPE_p_int32_T.getCPtr(cols));
    emxArray_real_T ret = (cPtr == global::System.IntPtr.Zero) ? null : new emxArray_real_T(cPtr, true);
    if (IsarMaincsPINVOKE.SWIGPendingException.Pending) throw IsarMaincsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void emxDestroyArray_real_T(emxArray_real_T emxArray) {
    IsarMaincsPINVOKE.emxDestroyArray_real_T(emxArray_real_T.getCPtr(emxArray));
  }

  public static void emxInitArray_real_T(SWIGTYPE_p_p_emxArray_real_T pEmxArray, SWIGTYPE_p_int32_T numDimensions) {
    IsarMaincsPINVOKE.emxInitArray_real_T(SWIGTYPE_p_p_emxArray_real_T.getCPtr(pEmxArray), SWIGTYPE_p_int32_T.getCPtr(numDimensions));
    if (IsarMaincsPINVOKE.SWIGPendingException.Pending) throw IsarMaincsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void IsarMain_initialize() {
    IsarMaincsPINVOKE.IsarMain_initialize();
  }

  public static void IsarMain_terminate() {
    IsarMaincsPINVOKE.IsarMain_terminate();
  }

}
